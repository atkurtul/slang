{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "slang",
	"patterns": [
		{
			"comment" : "Function declaration",
			"begin": "\\b(fn)\\s+([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)",
			"end": "\\{",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.fn.slang"
				},
				"2": {
					"name": "entity.name.function.slang"
				}
			},
			"patterns": [
				{
					"include": "#type_variable_sequence"
				},
				{
					"include": "#array_tuple_union"
				},
				{
					"include": "#keywords"
				}
			]
		},
		{
			"begin": "\\b(enum|type|union)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
			"end": "[\\{;=]",
			"beginCaptures": {
				"1": {
					"name": "storage.type.slang"
				},
				"2": {
					"name": "entity.name.type.slang"
				}
			}
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#line_comment"
		},
		{
			"include": "#core_types"
		},
		{
			"include": "#int_literal"
		},
		{
			"comment": "Function call",
			"match": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.slang"
				}
			}
		},
		{
			"name": "support.variable.slang",
			"match": "\\b([A-Za-z][_A-Za-z0-9]*|_[_A-Za-z0-9]+)\\b"
		},
		{
			"comment": "Type declaration",
			"begin": "\\b(enum|type|union)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
			"end": "[\\{]",
			"beginCaptures": {
				"1": {
					"name": "storage.type.slang"
				},
				"2": {
					"name": "entity.name.type.slang"
				}
			},
			"patterns": [
				{
					"include": "#line_comment"
				},
				{
					"include": "#core_types"
				}
			]
		},
		{
			"begin": "<:",
			"end": ":>",
			"patterns": [
				{
					"include": "#core_types"
				},
				{
					"include": "#asm_keywords"
				},
				{
					"include": "#int_literal"
				},
				{
					"include": "#asm_line_comment"
				},
				{
					"include": "#strings"
				}
			]
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.slang",
					"match": "\\b(if|else|while|for|ret|jmp|brk|in|loop)\\b"
				},
				{
					"name": "keyword.other.slang",
					"match": "\\b(fn|type|enum|union|alias|let|self|nil|and|or)\\b"
				}
			]
		},
		"type_variable": {
			"name": "support.type.variable.slang",
			"match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
		},
		"type_variable_sequence": {
			"begin": "\\[",
			"end": "\\]",
			"patterns": [
				{
					"include": "#type_variable"
				}
			]
		},
		"asm_keywords": {
			"patterns": [
				{
					"name": "keyword.other.slang",
					"match": "\\b(ret|brk|mov|ld|str|jmp|and|or|shr|shl|eq|ne|add|sub|mul|div|xor)\\b"
				}
			]
		},
		"asm_line_comment": {
			"name": "comment.line.slang",
			"begin": ";",
			"end": "$"
		},
		"strings": {
			"name": "string.quoted.double.slang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.slang",
					"match": "\\\\."
				}
			]
		},
		"int_literal": {
			"patterns": [
				{
					"name": "constant.numeric.integer.decimal.slang",
					"match": "\\b[0-9]+\\b"
				},
				{
					"name": "constant.numeric.integer.decimal.slang",
					"match": "\\b[0-9]+\\.[0-9]+\\b"
				},
				{
					"name": "constant.numeric.integer.decimal.slang",
					"match": "\\b0x[0-9a-fA-F]+\\b"
				}
			]
		},
		"line_comment": {
			"name": "comment.line.slang",
			"begin": "#",
			"end": "$"
		},
		"core_types": {
			"patterns": [
				{
					"name": "storage.type.primitive.slang",
					"match": "\\b(byte|word|int|long|half|real|double)\\b"
				},
				{
					"name": "storage.type.primitive.slang",
					"match": "\\bu(byte|word|int|long)\\b"
				},
				{
					"name": "support.type.vector.slang",
					"match": "\\b(byte(2|4|8|16|32)|word(2|4|8|16)|int(2|4|8)|long(2|4)|half(2|4|8|16)|real(2|4|8)|double(2|4))\\b"
				},
				{
					"name": "support.type.vector.slang",
					"match": "\\bu(byte(2|4|8|16|32)|word(2|4|8|16)|int(2|4|8)|long(2|4)|half(2|4|8|16)|real(2|4|8)|double(2|4))\\b"
				}
			]
		},
		"pointer_type": {
			"begin": "*",
			"patterns": [
				{
					"include": "#all_types"
				}
			]
		}
	},
	"variable": {
		"name": "support.variable.slang",
		"match": "\\b([A-Za-z][_A-Za-z0-9]*|_[_A-Za-z0-9]+)\\b"
	},
	"all_types": {
		"patterns": [
			{
				"include": "#array_tuple_union"
			},
			{
				"include": "#type_variable"
			},
			{
				"include": "#core_types"
			},
			{
				"include": "#pointer_type"
			}
		]
	},
	"return_type": {
		"begin": "\\b\\-\\>\\b",
		"patterns": [
			{
				"include": "#all_types"
			}
		]
	},
	"array_tuple_union": {
		"begin": "\\[",
		"end": "\\]",
		"patterns": [
			{
				"include": "#all_types"
			}
		]
	},
	"scopeName": "source.slang"
}